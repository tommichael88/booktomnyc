<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Tom Kongerslev - Professional Services</title>
    <style>
    body {
        font-family: Arial, sans-serif;
        margin: 0;
        padding: 0;
        display: flex;
        flex-direction: column;
        min-height: 100vh;
        background-color: #ffffff;
        text-align: center;
    }
    .container {
        max-width: 800px;
        margin: 0 auto;
        padding: .75rem;
        flex-grow: 1;
        position: relative;
        z-index: 1;
    }
    .pg_background {
        background-size: cover;
        background-position: center;
        position: fixed;
        top: 0;
        left: 0;
        right: 0;
        bottom: 0;
        z-index: -1;
    }
    header {
        background-color: rgba(0, 0, 0, 0.7);
        color: #ffffff;
        text-align: end;
        padding: 1rem 0;
    }
    h1, h2, h3 {
        margin: 1px 0;
    }
    .qr-code {
        max-width: 10px;
        margin: 10px auto;
    }
    .contact-button {
        background-color: #ff0000;
        color: #ffffff;
        border: none;
        padding: 5px 5px;
        font-size: 14px;
        cursor: pointer;
        margin-top: 5px;
        border-radius: 5px;
    }
    .contactModal {
        display: none;
        position: fixed;
        z-index: 2;
        left: 0;
        top: 0;
        width: 100%;
        height: 100%;
        overflow: auto;
        background-color: rgba(0, 0, 0, 0.4);
    }
    .contactModal-content {
        background-color: #fefefe;
        margin: 15% auto;
        padding: 20px;
        border: 1px solid #888;
        width: 80%;
        max-width: 500px;
    }
    .contactModalClose {
        color: #aaa;
        float: right;
        font-size: 28px;
        font-weight: bold;
        cursor: pointer;
    }
    .service-options {
        display: grid;
        grid-template-columns: repeat(2, 1fr);
        gap: 15px;
        margin-top: 20px;
    }
    .service-option {
        background-color: #000000;
        color: #ffffff;
        padding: 15px;
        cursor: pointer;
        text-align: center;
        font-size: 14px;
        border-radius: 5px;
    }
    .service-option.selected {
        background-color: #ff0000;
    }
    .task-details {
        margin-top: 20px;
    }
    textarea {
        width: 100%;
        height: 100px;
        margin-top: 10px;
        padding: 10px;
        font-size: 16px;
    }
    .book-button {
        background-color: #ff0000;
        color: #ffffff;
        border: none;
        padding: 15px 30px;
        font-size: 18px;
        cursor: pointer;
        margin-top: 20px;
        border-radius: 5px;
    }
    .invoices {
        background-color: rgba(0, 0, 0, 0.7);
        color: #ffffff;
        text-align: center;
        padding: 20px 0;
        margin-top: 20px;
    }
    .client-login {
        background-color: #ff0000;
        color: #ffffff;
        border: none;
        padding: 15px 30px;
        font-size: 18px;
        cursor: pointer;
        margin-top: 20px;
        border-radius: 5px;
    }
    footer {
        background-color: rgba(0, 0, 0, 0.7);
        color: #ffffff;
        text-align: center;
        padding: 10px 0;
        margin-top: auto;
    }
    footer a {
        color: #ffffff;
        text-decoration: none;
        margin: 0 10px;
    }
    @media (max-width: 600px) {
        .service-options {
            grid-template-columns: 1fr;
        }
        .service-option {
            font-size: 16px;
        }
    }
    #suggestedSection {
        margin-top: 20px;
        padding: 15px;
        background-color: #f0f0f0;
        border-radius: 5px;
    }
    #suggestedSection h3 {
        margin-bottom: 10px;
    }
    .suggested-options {
        display: grid;
        grid-template-columns: repeat(2, 1fr);
        gap: 10px;
    }
    .suggested-options button, #backButton {
        background-color: #ffffff;
        border: 1px solid #000000;
        padding: 10px;
        cursor: pointer;
        border-radius: 5px;
    }
    .suggested-options button:hover, #backButton:hover {
        background-color: #e0e0e0;
    }
    #backButton {
        margin-top: 15px;
    }
    .selected-service-btn, .suggested-service-btn, .action-button {
        background-color: rgba(200, 200, 200, 0.7);
        border: none;
        border-radius: 20px;
        padding: 8px 15px;
        margin: 5px;
        font-size: 14px;
        cursor: pointer;
        transition: all 0.3s ease;
        color: #000000;
    }
    .selected-service-btn:hover, .suggested-service-btn:hover, .action-button:hover {
        background-color: rgba(180, 180, 180, 0.9);
    }
    .remove-service {
        margin-left: 5px;
        font-weight: bold;
    }
    #selectedServicesSection, #suggestedSection {
        margin: 20px 0;
        padding: 15px;
        background-color: rgba(249, 249, 249, 0.7);
        border-radius: 10px;
        box-shadow: 0 2px 5px rgba(0,0,0,0.1);
    }
    .suggested-options {
        display: flex;
        flex-wrap: wrap;
        justify-content: center;
    }
</style>
</head>
<body>
        <div class="pg_background" style="background-image: url('https://tommichael88.github.io/booktomnyc/images/redblackwhitebg.png?raw=true');"></div>
    <div class="qrc_gallery_wrapper">
        <ul class="qrc_gallery_list">
            <li>
                <img class="img-fluid" style="pointer-events: none;" src="https://github.com/tommichael88/booktomnyc/blob/main/images/invoicelogo_tomkongerslev_nobg__.png?raw=true">
            </li>
        </ul>
        <header>
            <div class="container">
                <h2>TOM KONGERSLEV &nbsp;
                    <button id="contactBtn" class="contact-button">Contact ‚â£</button>
                </h2>
            </div>
        </header>

        <div id="mycontactModal" class="contactModal">
            <div class="contactModal-content">
                <span class="contactModalClose">CLOSE</span>
                <h2>SCHEDULING</h2>
                <button>Manage Upcoming Visit</button>
                <button>Book New Visit</button>
            </div>
        </div>

        <main>
            <br>
            <br>
            <br>
            <h1>üìÖ Schedule Service</h1>
            <div class="service-options">
                <div class="service-option">Minor Home Repairs</div>
                <div class="service-option">Furniture</div>
                <div class="service-option">Wall Mounting</div>
                <div class="service-option">Electrical Help</div>
                <div class="service-option">Plumbing Help</div>
                <div class="service-option">Computer Repairs</div>
            </div>

            <div class="task-details">
                <textarea placeholder="ü§ñ Type your task details here"></textarea>
            </div>

            <button class="book-button">‚òÖ‚òÖ‚òÖ BOOK ‚òÖ‚òÖ‚òÖ</button>
            <br>
            <br>
            <hr>
        </main>

        <div class="invoices">
            <h1>INVOICES</h1>
            <p>view invoices ‚Ä¢ process payments ‚Ä¢ digital receipts ‚Ä¢ review quote estimates ‚Ä¢ share documents ‚Ä¢ transaction history ‚Ä¢ expense receipts</p>
            <button class="client-login">üîê ùóñùóüùóúùóòùó°ùóß PORTAL</button>
        </div>
        <br>
        <hr>
        <footer>
            <a href="#">Privacy Policy</a>
            <a href="#">Service Scope</a>
            <a href="#">Service Agreement</a>
        </footer>
    </div>
    <script>
document.addEventListener('DOMContentLoaded', function() {
    const mainContent = document.querySelector('main');
    const serviceOptions = document.querySelectorAll('.service-option');
    const taskDetails = document.querySelector('.task-details textarea');
    const bookButton = document.querySelector('.book-button');

    const suggestedServices = {
        "Minor Home Repairs": {
            "Drywall repair": ["Small holes (< 6 inches)", "Large holes (> 6 inches)", "Cracks", "Texture matching"],
            "Door repair": ["Hinges", "Locks", "Weather stripping", "Door frame"],
            "Window repair": ["Glass replacement", "Weatherization", "Frame repair", "Sash replacement"],
            "Tile repair": ["Grout repair", "Tile replacement", "Sealing", "Re-caulking"]
        },
        "Furniture": {
            "Assembly": {
                "IKEA furniture": ["Bedroom furniture", "Living room furniture", "Dining room furniture", "Office furniture"],
                "Other brand furniture": ["Wayfair", "Amazon", "Overstock", "Local store purchases"],
                "Outdoor furniture": ["Patio sets", "Gazebos", "Swing sets", "Storage sheds"],
                "Office furniture": ["Desks", "Chairs", "Filing cabinets", "Bookcases"]
            },
            "Repair": ["Wood furniture", "Upholstery", "Metal furniture", "Antique restoration"],
            "Moving": ["In-home rearrangement", "Loading/Unloading", "Furniture protection", "Disassembly/Reassembly"],
            "Disassembly": ["IKEA furniture", "Other brand furniture", "For moving", "For disposal"]
        },
        "Wall Mounting": {
            "TV mounting": ["Flat screen", "Curved screen", "Above fireplace", "With cable management"],
            "Shelf installation": ["Floating shelves", "Bracket shelves", "Built-in shelves", "Heavy duty shelves"],
            "Picture hanging": ["Single frame", "Gallery wall", "Heavy mirrors", "Artwork installation"],
            "Mirror installation": ["Bathroom mirror", "Full-length mirror", "Decorative mirrors", "Custom shapes"]
        },
        "Electrical Help": {
            "Light fixture installation": ["Ceiling lights", "Wall sconces", "Pendant lights", "Recessed lighting"],
            "Outlet repair": ["GFCI installation", "USB outlet upgrade", "Loose outlet fix", "New outlet installation"],
            "Switch replacement": ["Dimmer switch", "Smart switch", "Three-way switch", "Timer switch"],
            "Ceiling fan installation": ["With light kit", "Remote control setup", "Balancing", "Existing wiring"]
        },
        "Plumbing Help": {
            "Faucet repair": ["Leaky faucet", "Faucet replacement", "Cartridge replacement", "Low water pressure fix"],
            "Toilet repair": ["Running toilet", "Clogged toilet", "Toilet replacement", "Bidet installation"],
            "Drain cleaning": ["Sink drain", "Bathtub drain", "Shower drain", "Main line cleaning"],
            "Pipe leak repair": ["Under sink", "In wall", "Copper pipe", "PVC pipe"]
        },
        "Computer Repairs": {
            "Virus removal": ["Malware removal", "Spyware removal", "System cleanup", "Security software installation"],
            "Hardware upgrade": ["RAM upgrade", "SSD installation", "Graphics card upgrade", "CPU replacement"],
            "Software installation": ["Operating system", "Productivity software", "Antivirus software", "Driver updates"],
            "Data recovery": ["Hard drive recovery", "SSD recovery", "File system repair", "Backup solution setup"]
        }
    };

    let selectedServices = [];

    function createSelectedServicesSection() {
        const selectedServicesSection = document.createElement('div');
        selectedServicesSection.id = 'selectedServicesSection';
        selectedServicesSection.innerHTML = '<div id="selectedServiceButtons"></div>';
        mainContent.insertBefore(selectedServicesSection, document.querySelector('.task-details'));
    }

    function updateSelectedServices() {
        const selectedServiceButtons = document.getElementById('selectedServiceButtons');
        selectedServiceButtons.innerHTML = '';
        selectedServices.forEach(service => {
            const button = document.createElement('button');
            button.className = 'selected-service-btn';
            button.innerHTML = `${service} <span class="remove-service">√ó</span>`;
            button.querySelector('.remove-service').addEventListener('click', (e) => {
                e.stopPropagation();
                removeService(service);
            });
            selectedServiceButtons.appendChild(button);
        });
    }

    function removeService(service) {
        selectedServices = selectedServices.filter(s => s !== service);
        updateSelectedServices();
    }

    function showSuggestedServices(category, subcategory = null, subsubcategory = null) {
        const suggestedSection = document.createElement('div');
        suggestedSection.id = 'suggestedSection';
        
        if (subcategory === null) {
            suggestedSection.innerHTML = `
                <h3>Suggested services for ${category}:</h3>
                <div class="suggested-options"></div>
                <button id="backButton" class="action-button">Back</button>
            `;

            const suggestedOptions = suggestedSection.querySelector('.suggested-options');
            Object.keys(suggestedServices[category]).forEach(subcat => {
                const button = document.createElement('button');
                button.textContent = subcat;
                button.className = 'suggested-service-btn';
                button.addEventListener('click', () => showSuggestedServices(category, subcat));
                suggestedOptions.appendChild(button);
            });
        } else if (subsubcategory === null) {
            suggestedSection.innerHTML = `
                <h3>Options for ${subcategory}:</h3>
                <div class="suggested-options"></div>
                <button id="backButton" class="action-button">Back</button>
            `;

            const suggestedOptions = suggestedSection.querySelector('.suggested-options');
            if (Array.isArray(suggestedServices[category][subcategory])) {
                suggestedServices[category][subcategory].forEach(option => {
                    const button = document.createElement('button');
                    button.textContent = option;
                    button.className = 'suggested-service-btn';
                    button.addEventListener('click', () => selectSuggestedService(`${category} - ${subcategory} - ${option}`));
                    suggestedOptions.appendChild(button);
                });
            } else {
                Object.keys(suggestedServices[category][subcategory]).forEach(subsubcat => {
                    const button = document.createElement('button');
                    button.textContent = subsubcat;
                    button.className = 'suggested-service-btn';
                    button.addEventListener('click', () => showSuggestedServices(category, subcategory, subsubcat));
                    suggestedOptions.appendChild(button);
                });
            }
        } else {
            suggestedSection.innerHTML = `
                <h3>Options for ${subsubcategory}:</h3>
                <div class="suggested-options"></div>
                <button id="backButton" class="action-button">Back</button>
            `;

            const suggestedOptions = suggestedSection.querySelector('.suggested-options');
            suggestedServices[category][subcategory][subsubcategory].forEach(option => {
                const button = document.createElement('button');
                button.textContent = option;
                button.className = 'suggested-service-btn';
                button.addEventListener('click', () => selectSuggestedService(`${category} - ${subcategory} - ${subsubcategory} - ${option}`));
                suggestedOptions.appendChild(button);
            });
        }

        mainContent.insertBefore(suggestedSection, document.getElementById('selectedServicesSection'));
        document.querySelector('.service-options').style.display = 'none';

        document.getElementById('backButton').addEventListener('click', () => {
            suggestedSection.remove();
            if (subcategory === null) {
                document.querySelector('.service-options').style.display = 'grid';
            } else if (subsubcategory === null) {
                showSuggestedServices(category);
            } else {
                showSuggestedServices(category, subcategory);
            }
        });
    }

    function selectSuggestedService(service) {
        if (!selectedServices.includes(service)) {
            selectedServices.push(service);
            updateSelectedServices();
        }
        document.getElementById('suggestedSection').remove();
        document.querySelector('.service-options').style.display = 'grid';
    }

    createSelectedServicesSection();

    serviceOptions.forEach(option => {
        option.addEventListener('click', function() {
            const category = this.textContent;
            showSuggestedServices(category);
        });
    });

    bookButton.addEventListener('click', function() {
        if (selectedServices.length === 0) {
            alert('Please select at least one service before booking.');
        } else {
            const additionalDetails = taskDetails.value;
            alert(`Booking confirmed for: ${selectedServices.join(', ')}\n\nAdditional details: ${additionalDetails}`);
        }
    });

    // Existing modal functionality
    var modal = document.getElementById('mycontactModal');
    var btn = document.getElementById('contactBtn');
    var span = document.getElementsByClassName('contactModalClose')[0];

    btn.onclick = function() {
        modal.style.display = 'block';
    }

    span.onclick = function() {
        modal.style.display = 'none';
    }

    window.onclick = function(event) {
        if (event.target == modal) {
            modal.style.display = 'none';
        }
    }
});
</script>
</body>
</html>
